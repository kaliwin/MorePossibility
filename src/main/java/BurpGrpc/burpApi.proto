//指定的当前proto语法的版本, 有2和3
syntax = "proto3";

option java_multiple_files = true;                    //等于true则将为每个消息类型生成单独的文件。
option java_package = "BurpGrpc.proto.BurpApiGrpc";   //实例包名
option java_outer_classname = "BurpApi";              //类名
option objc_class_prefix = "HLW";                     //生成前缀 未知用法
option go_package = "/BurpApi";                        //go 实例包名路径

//包名 服务名称 用于http2路由
package burpApi;



//burpApi服务
service BurpServer{

  /*
    注册实时流量传输
    burp将监听端口通过服务端端流进行实时流量镜像
  */
  rpc RegisterRealTimeTrafficMirroring(Str) returns (stream httpReqAndRes){}

  /*
      实时流量传输
      burp将主动建立连接通过客户端流进行实时流量镜像
    */
  rpc RealTimeTrafficMirroring(stream httpReqAndRes) returns (Str){}

  //  // 迭代器载荷处理
  //  rpc IntruderPayloadProcessor(ByteData)returns(ByteData){}
  //
  //  // 迭代器载荷生成
  //  rpc IntruderPayloadGeneratorProvider(IntruderGeneratorData) returns (ByteData){}

  // 注册服务
  // 服务注册 主动向burp发起请求进行注册服务
  rpc RegisterServer(Str) returns (Status){}
}

// 侦查服务
service ScoutServer {
  // 添加http编辑器加解密键值对 参数为http编辑组件名称以及key、value
  rpc addHttpEditorEncryptAndDecryptKeyValue(httpEditorKeyValue)returns(Status){}

  rpc AddHttpKeyValuePair(httpKeyValuePair) returns(Boole){}   //添加http键值对

}

// 迭代器服务, 两个函数 处理器和生成器,用于引入第三方程序
service IntruderServer {
  // 迭代器载荷处理
  rpc IntruderPayloadProcessor(ByteData)returns(ByteData){}

  // 迭代器载荷生成, 服务端流 流终止就为生成结束
  rpc IntruderPayloadGeneratorProvider(IntruderGeneratorData) returns (ByteData){}
}


// 提供请求编辑框
service HttpReqEditBoxAssist{
  rpc ReqHttpEdit (HttpEditBoxData) returns (ByteData){}    // 返回数据渲染
  rpc IsReqHttpEditFor(HttpEditBoxData) returns (Boole){}   // 是否要渲染
}


// 提供响应编辑框
service HttpResEditBoxAssist{
  rpc ResHttpEdit (HttpEditBoxData) returns (ByteData){}   // 返回数据渲染
  rpc IsResHttpEditFor(HttpEditBoxData) returns (Boole){}  // 是否渲染 会频繁调用
}


// 右键菜单项执行程序
service ContextMenuItemsProvider{
  rpc MenuItemsProvider(ContextMenuItems) returns(MenuItemsReturn){}  // 菜单项处理
}


// 获取上下文菜单项服务器
service GetConTextMenuItemsServer {
  rpc GetConTextMenuItems(Str)returns(MenuInfo){}
}


// 代理请求处理器 提供请求修改拦截
service ProxyRequestHandler{
  rpc ProxyHandleRequestReceived(httpReqGroup) returns(ProxyRequestAction){} // 代理请求处理
}

// 代理响应处理器 提供对相应的处理
service ProxyResponseHandler{
  rpc ProxyHandleResponseReceived(httpReqAndRes)returns(ProxyResponseAction){}  // 代理响应处理
}

// http 请求处理器 请求和响应放一起
service HttpFlowHandler{
  rpc HttpHandleRequestReceived(httpReqGroup) returns(HttpRequestAction){}
  rpc HttpHandleResponseReceived(httpReqAndRes) returns(HttpResponseAction){}
}

//// http 响应处理器
//service HttpResponseHandler{
//
//}


// http请求操作
message HttpRequestAction{
  bool continue = 1; // 继续不做任何处理
  bool isReviseReq = 3;  // 修改请求
  httpReqGroup httpReqGroup = 4;
}

// http响应操作
message HttpResponseAction{
  bool continue = 1; // 继续不做任何处理
  bool isReviseRes = 3;  // 修改请求

  httpResGroup httpResGroup = 4;

  //  httpReqData res = 4;
  //  annotationsText annotation = 5 ; // 注解
  //  bool isInit = 6;  // 是否初始化

}

// 收到代理请求的操作
message ProxyRequestAction{
  bool continue = 1; // 继续不做任何处理
  bool drop = 2 ;  // 丢弃请求
  bool isReviseReq = 3;  // 修改请求
  bool isIntercept = 4 ;  // 是否拦截   无论是否修改都要返回数据也就是httpReqData 字段

  httpReqGroup httpReqGroup = 5;

  //  annotationsText annotation = 5 ; // 注解
  //  httpReqData req = 6; // 修改请求
}

// 收到代理响应的操作
message ProxyResponseAction{
  bool continue = 1; // 继续不做任何处理
  bool drop = 2 ;  // 丢弃响应
  bool isReviseRes = 3;  // 修改响应
  bool isIntercept = 4 ;  // 是否拦截  无论是否修改都要返回数据也就是httpReqData 字段
  httpResGroup httpResGroup = 5;
  //  annotationsText annotation = 5 ; // 注解
  //  httpResData res = 6; // 修改响应
}



// http编辑框数据, 名字
message HttpEditBoxData{
  string name = 1; // 名字 编辑器名称
  httpReqAndRes httpData = 2; // 一组http数据 请求 / 响应
  string info = 3 ; // 预留字段
}


// http键值对信息, 明文密文可相互匹配
message httpKeyValuePair{
  string domain = 1;      // 域名作用域 正则表达式 用于匹配适用的url
  bytes ciphertext = 2 ;  // 明文数据
  bytes plaintext = 3;    // 密文数据
}


// http编辑器的键值对用于命中密文转换为明文, 没命中将不会显示
message httpEditorKeyValue{
  ByteData key = 1;    // 键
  ByteData value = 2 ; // 值
  Str editorName = 3;  // 编辑器名称
}


// 一个上下文菜单项信息
message MenuInfo{
  //  string name = 1;  // 名称
  string tarGet = 2; // 服务地址往后菜单项都用这个地址服务
  Menu menu = 3;   // 菜单项
}

// 菜单 菜单下可包含多个菜单和菜单项
message Menu{
  string name = 1;
  repeated Menu menuList = 2;
  repeated MenuItem menuItemList = 3;
}

// 菜单项 实际处理程序用于点击
message MenuItem{
  string name = 1;
}

// 上下文处理器 , 提供 一组请求响应 和选中的数据
message ContextMenuItems{
  string  name = 3;                  //名称
  bool isSelect = 4;                // 是否有选中的数据
  httpReqAndRes httpReqAndRes = 1;  // 一组请求和响应
  bytes selectData = 2;             // 用户选中的数据
}

// 菜单项返回 给burp 要做的操作
message MenuItemsReturn{
  bool IsReviseReq = 1 ; // 修改请求
  bool IsReviseRes = 2 ;
  bytes ReqData = 3 ; // 请求数据用于覆盖burp 请求   用于修改 http编辑框
  bytes ResData = 4 ; // 请求数据用于覆盖burp 请求   用于修改 http编辑框
}

// 布尔值
message Boole{
  bool boole = 1;
}

// 状态,用于表示函数执行状态，服务或对象状态
message Status{
  bool boole = 1;     // 布尔值
  int64 code = 2;     // 状态码
  string info = 3;    // 描述信息
  bytes tmpByte = 4;  // 字节流用于占位和预留
}


//名称 String类型
message Str{
  string name = 1;
}

//服务路由表 包含零号以及第三方拓展愿意向burp提供的服务
message serviceRoutingTable{
  repeated serviceRouting Routing = 1;
}

// 服务路由
message serviceRouting{
  serverName sn = 1;
  Str Name = 2;
}



//迭代生成器 数据
message IntruderGeneratorData{
  bytes contentData = 1; // http 请求模板
  repeated  InsertionPointOffsets  insertionPointOffsets = 2;  // 插入点列表
  bytes IntruderInsertionPoint = 3;  //插入点基值
}

// 插入点
message InsertionPointOffsets{
  int64 StartIndex = 1; // 开始下标
  int64 EndIndex = 2;   // 结束下标
}


// 字节数据
message ByteData {
  bytes byteData = 1;
}


// 一组http请求 (请求和响应)
message httpReqAndRes {
  httpReqData req = 1;
  httpResData res = 2;
  httpInfo info = 3;
  annotationsText annotationsText = 4;
}

// http 单个请求 包含头部和体
message httpReqData {
  bytes Data = 1;                       //请求包数据
  string Url = 2;                       //请求url
  int64 BodyIndex = 3;                  //请求体开始下标,如若请求体下标与总长度一致就是没有请求体
  string httpVersion = 4;               // http版本
  httpReqService httpReqService = 5;    // 目标信息
}

// 单个请求组 用于包含 不同服务请求中的附带信息
message httpReqGroup{
  httpReqData httpReqData = 1;
  annotationsText annotationsText = 2 ;
}


// http 单个响应 包含头部和体
message httpResData {
  bytes Data = 1;    //请求包数据
  int32 StatusCode = 2 ; //状态码
  int64 BodyIndex = 3;   //请求体开始下标,如若请求体下标与总长度一致就是没有请求体
  string httpVersion = 5;
}

// http 单个响应组 用于包含 不同服务响应中的附带信息
message httpResGroup{
  httpResData httpResData = 1;
  annotationsText annotationsText = 2 ;
}


// http 请求主机的信息
message httpReqService{
  string ip = 1 ;
  int32  port = 2 ;
  bool  secure = 3;  // 是否使用https
}


// http信息
message httpInfo {
  int64 id = 1;      // id
  string info = 2;   // 简述信息
  bytes tmp = 3;     // 预留类型
}

// 注释信息
message annotationsText {
  bool isInfo = 1;           // 是否有注解信息
  string notes = 2 ;         // 注解文本
  string color = 3;          // 颜色
}

// 服务名称
enum serverName {
  RealTimeTrafficMirroring = 0;   // 实时流量镜像服务
  IntruderProvider = 1 ;          // 迭代器处理
  IntruderGenerator = 2 ;          // 迭代器生成
  ScoutIntelligence = 3 ;          // 斥候情报
}


// 注解颜色
enum highlightColor {
  NONE = 0;
  RED = 1;
  ORANGE = 2;
  YELLOW = 3;
  GREEN = 4;
  CYAN = 5;
  BLUE = 6;
  PINK = 7;
  MAGENTA = 8;
  GRAY = 9;
}

